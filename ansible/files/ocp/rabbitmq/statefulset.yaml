apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &name rabbitmq
  namespace: &namespace openstack
spec:
  replicas: 1
  serviceName: &sts_service rabbitmq-cluster
  selector:
    matchLabels:
      app: &app rabbitmq
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
      namespace: *namespace
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "3Gi"
  template:
    metadata:
      name: *name
      namespace: *namespace
      labels:
        app: *app
    spec:
      serviceAccountName: openstack-proto
      volumes:
      - name: config
        emptyDir: {}
      - name: kolla-config
        configMap:
          name: rabbitmq
          defaultMode: 0400
          items:
            - key: config.json
              path: config.json
      - name: config-data
        configMap:
          name: rabbitmq
          defaultMode: 0400
      - name: rabbitmq-cluster
        secret:
          secretName: rabbitmq-cluster
          defaultMode: 0400
      initContainers:
      - name: rabbitmq-init
        image: &image docker.io/tripleomaster/centos-binary-rabbitmq:current-tripleo
        securityContext:
          runAsUser: 0
        volumeMounts: &volumeMounts
        - mountPath: /etc/rabbitmq
          readOnly: false
          name: config
        - mountPath: /var/lib/config-data
          readOnly: true
          name: config-data
        - mountPath: /var/lib/kolla/config_files
          readOnly: true
          name: kolla-config
        - mountPath: /var/lib/rabbitmq-cluster
          readOnly: true
          name: rabbitmq-cluster
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
        env:
        - name: KOLLA_CONFIG_STRATEGY
          value: COPY_ALWAYS
        - name: KOLLA_BOOTSTRAP
          value: 'true'
      containers:
      - name: rabbitmq
        image: *image
        volumeMounts: *volumeMounts
        env:
        - name: KOLLA_CONFIG_STRATEGY
          value: COPY_ALWAYS
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          value: *namespace
        - name: STS_SERVICE
          value: *sts_service
        - name: RABBITMQ_NODENAME
          value: rabbit@$(POD_NAME).$(STS_SERVICE).$(NAMESPACE).svc.cluster.local
        ports:
        - name: amqp
          containerPort: 5672
          protocol: TCP
        - name: management
          containerPort: 15672
          protocol: TCP
        - name: prometheus
          containerPort: 15692
          protocol: TCP
        - name: epmd
          containerPort: 4369
          protocol: TCP
        - name: cluster
          containerPort: 25672
          protocol: TCP
        livenessProbe:
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 2 check:
            command: ["rabbitmq-diagnostics", "status"]
          initialDelaySeconds: 60
          # See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe: # probe to know when RMQ is ready to accept traffic
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 1 check:
            command: ["rabbitmq-diagnostics", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
