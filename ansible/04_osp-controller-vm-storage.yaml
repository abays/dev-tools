---
- hosts: convergence_base

  tasks:
  - name: Include variables
    include_vars: vars/default.yaml

  - name: create {{ converged_ssh_key }} ssh key
    become_user: ocp
    become: true
    openssh_keypair:
      path: "{{ converged_ssh_key }}"
    register: ssh_key

  - name: prepare VM image for under/overcloud
    become: true
    become_user: root
    block:
    - name: load RHEL 8.1 guest image
      get_url:
        url: "{{ rhel_guest_image_url }}"
        dest: /home/nfs
        mode: '0644'

    - name: create rhel8.qcow2, expand the filesystem, install rhos-release and pre-create ifcfg-enp1s0 and enp2s0 interface configs
      shell: |
        qemu-img create -f qcow2 rhel8.qcow2 80G
        virt-resize --expand /dev/sda1 rhel-guest-image-8.1-423.x86_64.qcow2 rhel8.qcow2
        virt-sysprep \
         --network \
         -a rhel8.qcow2 \
         --root-password password:{{ osp_controller_root_pwd }} \
         --run-command 'useradd -s /bin/bash -m -G wheel stack' \
         --ssh-inject root:string:'{{ ssh_key.public_key }}' \
         --ssh-inject stack:string:'{{ ssh_key.public_key }}' \
         --run-command "systemctl disable cloud-init cloud-config cloud-final cloud-init-local" \
         --run-command "yum localinstall -y http://download.devel.redhat.com/rcm-guest/puddles/OpenStack/rhos-release/rhos-release-latest.noarch.rpm" \
         --run-command "rhos-release 16 -p {{ osp_compose }} -r 8.1" \
         --run-command "dnf install -y network-scripts network-scripts-team network-scripts-openvswitch2.11" \
         --run-command "echo -e \"DEVICE=\"enp1s0\"\nBOOTPROTO=\"dhcp\"\nONBOOT=\"yes\"\nTYPE=\"Ethernet\"\">/etc/sysconfig/network-scripts/ifcfg-enp1s0" \
         --run-command "echo -e \"DEVICE=\"enp2s0\"\nBOOTPROTO=\"dhcp\"\nONBOOT=\"yes\"\nTYPE=\"Ethernet\"\">/etc/sysconfig/network-scripts/ifcfg-enp2s0" \
         --run-command "rm -f /etc/sysconfig/network-scripts/ifcfg-eth0" \
         --run-command "systemctl enable network" \
         --run-command "sed -i -e 's/net.ifnames=0//' /etc/default/grub" \
         --run-command "grub2-mkconfig -o /boot/grub2/grub.cfg" \
         --selinux-relabel
      args:
        chdir: "/home/nfs"

    - name: Create 3 different directories that will be exported over NFS for each controller disk
      file:
        path: "/home/nfs/pv/controller-{{ item }}"
        state: directory
        mode: '0755'
        owner: root
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"

    - name: Convert the disk to raw and save the output under each of the NFS directories
      # (note that disk.img is important here as it is the expected name from Kubevirt)
      command: qemu-img convert -p -O raw rhel8.qcow2 /home/nfs/pv/controller-{{ item }}/disk.img
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"
      args:
        chdir: "/home/nfs"

    - name: Export each directory over NFS
      lineinfile:
        path: /etc/exports
        regexp: "^.*{{ item }}.*"
        line: "/home/nfs/pv/controller-{{ item }} *(rw,no_root_squash)"
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"

    - name: Export NFS share to the server
      command: "exportfs -ra"

  - name: create overcloud cotnroller pv/pvc/sc
    become: true
    become_user: ocp
    block:
    - name: create working dir for rendered templates
      file:
        path: /tmp/cnv
        state: directory
        mode: '0755'
    block:
    - name: create working dir for rendered templates
      file:
        path: /tmp/cnv
        state: directory
        mode: '0755'

    - name: create controller-X-pv.yaml from template
      template:
        src:  "controller-X-pv.yaml.j2"
        dest: "/tmp/cnv/controller-{{ item }}-pv.yaml"
        mode: 0644
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"

    - name: create controller-X-sc.yaml from template
      template:
        src:  "controller-X-sc.yaml.j2"
        dest: "/tmp/cnv/controller-{{ item }}-sc.yaml"
        mode: 0644
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"

    - name: create controller-X-pvc.yaml from template
      template:
        src:  "controller-X-pvc.yaml.j2"
        dest: "/tmp/cnv/controller-{{ item }}-pvc.yaml"
        mode: 0644
      loop: "{{ range(0, osp_controller_scale , 1)|list }}"

    - name: Using oc (OpenShift client), create a StorageClass, PersistentVolume, and PersistentVolumeClaim associated with each NFS directory.
      shell: |
         oc apply -f /tmp/cnv/controller-{{ item }}-sc.yaml
         oc apply -f /tmp/cnv/controller-{{ item }}-pv.yaml
         oc apply -f /tmp/cnv/controller-{{ item }}-pvc.yaml
      loop: "{{ range(0, osp_controller_scale, 1)|list }}"
      args:
        chdir: "{{ base_path }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"

    - name: check pvc
      command: oc get pvc
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"
      register: pvc

    - name: Display configured pvc
      debug:
        msg: "{{ pvc.stdout.split('\n') }}"
