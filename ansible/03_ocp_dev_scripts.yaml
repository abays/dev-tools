---
- hosts: convergence_base
  become: true
  become_user: ocp

  tasks:
  - name: Include variables
    include_vars: vars/default.yaml

  - name: Clone the dev-scripts repo
    git:
      repo: "{{ dev_scripts_repo | default('https://github.com/openshift-metal3/dev-scripts.git', true) }}"
      dest: "{{ base_path }}/dev-scripts"
      version: "{{ dev_scripts_branch | default('HEAD', true) }}"

  - name: Copy the config_example.sh to config_$USER.sh
    copy:
      src: "{{ base_path }}/dev-scripts/config_example.sh"
      dest: "{{ base_path }}/dev-scripts/config_$USER.sh"
      mode: 0755
      remote_src: yes

  - block:
    - name: Get the OCP version to be used
      import_role:
        name: get_cnv_tested_ocp_version

# NOTE(mdbooth): The following block looks redundant to me, as the
# get_cnv_tested_ocp_version will always set ocp_release_image, and therefore
# ocp_release_info will never be used. I've left it commented out in case it
# needs to be restored for some reason I missed.

#    - name: get latest OCP image for ocp_release
#      uri:
#        url: "https://openshift-release.svc.ci.openshift.org/api/v1/releasestream/{{ ocp_release | default('4.4', true) }}.0-0.ci/latest"
#        return_content: yes
#      register: ocp_release_info
#  
#    - set_fact:
#        ocp_release_info_content: "{{ ocp_release_info.content|from_json }}"
#  
#    - set_fact:
#        ocp_release_image_real: "{{ ocp_release_image if ocp_release_image is defined else ocp_release_info_content['pullSpec'] }}"

    when: ocp_release_image is not defined

  - name: set OCP release to use
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export OPENSHIFT_RELEASE_IMAGE=.*'
      line: "export OPENSHIFT_RELEASE_IMAGE={{ ocp_release_image }}"

  - name: set WORKING_DIR in {{ base_path }}/dev-scripts/config_$USER.sh
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export WORKING_DIR='
      line: export WORKING_DIR='{{ base_path }}'

  - block:
    - name: Copy pull-secret
      copy:
        dest: "{{ base_path }}/pull-secret"
        src: files/pull-secret
    rescue:
    - fail:
        msg: |
          files/pull-secret is not present. You must obtain it from
          https://cloud.redhat.com/openshift/install/pull-secret and copy it
          there manually.

  - name: set PULL_SECRET in {{ base_path }}/dev-scripts/config_$USER.sh
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export PULL_SECRET='
      line: export PULL_SECRET=$(cat "{{ base_path }}/pull-secret")

  - name: set IP_STACK in {{ base_path }}/dev-scripts/config_$USER.sh
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export IP_STACK='
      line: export IP_STACK='{{ ocp_ip_stack }}'

  - name: set CLUSTER_NAME in {{ base_path }}/dev-scripts/config_osp_cnv.sh
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export CLUSTER_NAME='
      line: export CLUSTER_NAME='{{ ocp_cluster_name }}'

  - name: set OCP number of workers
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export NUM_WORKERS=.*'
      line: "export NUM_WORKERS={{ ocp_num_workers }}"

  - name: set OCP number of masters
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export NUM_NUM_MASTERS=.*'
      line: "export NUM_MASTERS={{ ocp_num_masters | default('3', true)}}"

  - name: set OCP master memory
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export MASTER_MEMORY=.*'
      line: "export MASTER_MEMORY={{ ocp_master_memory }}"

  - name: set OCP network type
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export NETWORK_TYPE=.*'
      line: "export NETWORK_TYPE={{ ocp_network_type }}"

  - name: set OCP master disk
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export MASTER_DISK=.*'
      line: "export MASTER_DISK={{ ocp_master_disk }}"

  - name: set OCP master vcpus
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export MASTER_VCPU=.*'
      line: "export MASTER_VCPU={{ ocp_master_vcpu }}"

  - name: set OCP worker memory
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export WORKER_MEMORY=.*'
      line: "export WORKER_MEMORY={{ ocp_worker_memory }}"

  - name: set OCP worker disk
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export WORKER_DISK=.*'
      line: "export WORKER_DISK={{ ocp_worker_disk }}"

  - name: set OCP worker vcpus
    lineinfile:
      path: "{{ base_path }}/dev-scripts/config_$USER.sh"
      regexp: '^export WORKER_VCPU=.*'
      line: "export WORKER_VCPU={{ ocp_worker_vcpu }}"

  - name: cleanup previous dev-script deployment
    shell: |
      export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
      make clean
    args:
      chdir: "{{ base_path }}/dev-scripts"

  - debug:
      msg: |
        Executing dev-script. You can tail the logs at ~ocp/dev-script.log on
        the host for progress.

  - name: run dev-script
    shell: |
      export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
      make 2>&1 | tee ~/dev-script.log
    args:
      chdir: "{{ base_path }}/dev-scripts"
    environment:
      PATH: /usr/local/bin:{{ ansible_env.PATH }}

  - name: To access the OCP web console
    debug:
      msg:
        - "1) add the following line to your local /etc/hosts:"
        - "   192.168.111.4   console-openshift-console.apps.{{ ocp_cluster_name }}.test.metalkube.org console openshift-authentication-openshift-authentication.apps.{{ ocp_cluster_name }}.test.metalkube.org api.{{ ocp_cluster_name }}.test.metalkube.org prometheus-k8s-openshift-monitoring.apps.{{ ocp_cluster_name }}.test.metalkube.org alertmanager-main-openshift-monitoring.apps.{{ ocp_cluster_name }}.test.metalkube.org kubevirt-web-ui.apps.{{ ocp_cluster_name }}.test.metalkube.org oauth-openshift.apps.{{ ocp_cluster_name }}.test.metalkube.org grafana-openshift-monitoring.apps.{{ ocp_cluster_name }}.test.metalkube.org"
        - "2) run on your local system:"
        - "   sshuttle -r <user>@{{ ansible_fqdn }} 192.168.111.0/24"
        - "3) access:"
        - "   https://console-openshift-console.apps.{{ ocp_cluster_name }}.test.metalkube.org"
